* Obtener datos para reportar

Lo primero que se hará será obtener datos para poder hacer los reportes.  En este caso, se obtendrán datos del COVID19 del sitio web la página web https://covid19api.com/.

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_165009.png @ 2020-05-10 16:50:53
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Captura del sitio web
[[file:Obtener_datos_para_reportar/2020-05-10_16-50-53_Screenshot_20200510_165009.png]]

En este caso, se guardará la lista de países infectados y datos acerca de el número de casos, el número de muertes, y el número de recuperaciones en estos.

** Creando base de datos

Lo primero que se hace es crear una base de datos en MySQL con todos los datos mencionados en el párrafo anterior.  Este es el código utilizado para ello:
#+begin_src sql
drop database if exists coronachan;
create database coronachan;
use coronachan;

DROP TABLE IF EXISTS `paises`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `paises` (
  `clave_pais` varchar(60) NOT NULL,
  `nombre` varchar(100) NOT NULL,
  `iso2` varchar(100) NOT NULL,
  PRIMARY KEY (`clave_pais`),
  KEY `indice_nombre` (`nombre`)
  KEY `indice_iso` (`iso2`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

DROP TABLE IF EXISTS `registro_dia`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `registro_dia` (
  `id_dia` int(11) NOT NULL AUTO_INCREMENT,
  `fecha` datetime NOT NULL,
  `confirmados` bigint(20) NOT NULL,
  `muertes` bigint(20) NOT NULL,
  `recuperados` bigint(20) NOT NULL,
  `clave_pais` varchar(60) NOT NULL,
  PRIMARY KEY (`id_dia`),
  KEY `fk_clave_pais` (`clave_pais`),
  CONSTRAINT `fk_clave_pais` FOREIGN KEY (`clave_pais`) REFERENCES `paises` (`clave_pais`)
) ENGINE=InnoDB AUTO_INCREMENT=30016 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;
#+end_src

Se guarda en algún archivo SQL y se ejecuta.

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_165736.png @ 2020-05-10 17:05:22
#+attr_org: :width 500
#+attr_html: :width 60%
#+CAPTION: 
[[file:Obtener_datos_para_reportar/2020-05-10_17-05-22_Screenshot_20200510_165736.png]]


** Obteniendo datos con Python

Lo siguiente será obtener la lista de todos los datos d e todos los países usando la API de manera automatizada con Python.
Para poder guardar estos datos en MySQL, primero es necesario instalar el conector de MySQL para Python.

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_165428.png @ 2020-05-10 17:13:46
#+attr_org: :width 500
#+attr_html: :width 70%
#+CAPTION: Captura de pantalla con instalación de conector.
[[file:Obtener_datos_para_reportar/2020-05-10_17-13-46_Screenshot_20200510_165428.png]]

A continuación se crea el código para bajar todos los datos con Python.  El código usado se muestra a continuación.
#+begin_src python
import mysql.connector
import requests
from datetime import datetime


def obtenConexion():
    return mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        passwd="root",
        database='coronachan'
    )


def obtenPaises():
    return requests.get(url='https://api.covid19api.com/countries').json()


def obtenPais(nombrePais):
    strPais = 'https://api.covid19api.com/total/country/%s' % nombrePais
    return requests.get(url = strPais).json()


def insertaPaises():
    print('Obten paises')
    paises = obtenPaises()
    print('Paises obtenidos')
    strPaises = "insert into paises (clave_pais, nombre, iso2) values (%s, %s, %s)"
    db = obtenConexion()
    for pais in paises:
        clave = pais['Slug']
        nombre = pais['Country']
        iso2 = pais['ISO2']
        print(clave, nombre, iso2)
        c = db.cursor()
        c.execute(strPaises, (clave, nombre, iso2))
        db.commit()
    db.close()


def insertaDatosPorPais():
    print('Obten paises')
    paises = obtenPaises()
    print('Paises obtenidos')
    db = obtenConexion()
    paises = obtenPaises()
    formato = "%Y-%m-%dT%H:%M:%SZ"
    strRegistro = 'insert into registro_dia (fecha, confirmados, muertes, recuperados, clave_pais) values (%s, %s, %s, %s, %s)'
    for pais in paises:
        slug = pais['Slug']
        print('Obteniendo datos de pais %s' % slug)
        dias = obtenPais(slug)
        print('Datos de %s obtenidos' % slug)
        for dia in dias:
            confirmados = dia['Confirmed']
            muertes = dia['Deaths']
            recuperados = dia['Recovered']
            fecha = datetime.strptime(dia['Date'], formato)
            c = db.cursor()
            c.execute(strRegistro, (
                str(fecha),
                confirmados,
                muertes,
                recuperados,
                slug
            ))
            db.commit()
    db.close()


def main():
    insertaPaises()
    insertaDatosPorPais()


if __name__ == '__main__':
    main()
#+end_src

Y se ejecuta

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_170254.png @ 2020-05-10 17:15:55
#+attr_org: :width 500
#+attr_html: :width 60%
#+CAPTION: Ejecutando scrapper
[[file:Obtener_datos_para_reportar/2020-05-10_17-15-55_Screenshot_20200510_170254.png]]

* Configurando Php

Se da por hecho que Php ya estaba configurando con algún conector para MySQL.  Si no, es necesario configurar Php y además su conector con MySQL.
Lo mismo para Composer.

La herramienta que se usará para crear los reportes se llama *Kool Reports*.

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_172227.png @ 2020-05-10 17:23:06
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Captura de pantalla de Kool Reports
[[file:Configurando_Php/2020-05-10_17-23-06_Screenshot_20200510_172227.png]]

Esto se instala con Composer.  Es necesario ir a la raíz de donde valla a estar el proyecto, y ejecutar lo siguiente:
#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_172352.png @ 2020-05-10 17:24:10
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Instalación de koolreport
[[file:Configurando_Php/2020-05-10_17-24-10_Screenshot_20200510_172352.png]]

* Creando visualización en HTML

Lo primero que se necesita es el HTML necesario para mostrar la página.  Solo habrá una página, y sus contenidos se deberán poner en ~index.php~.
#+begin_src php
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="Pagina con reportes del coronavirus :v">
    <meta name="author" content="German Gutierrez">
    <meta name="keywords" content="php reportes framework">
    <title>Reporte de Coronavirus</title>

    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
</head>
<body>
<?php

require_once "CoronaPorPais.php";
$report = new CoronaPorPais();
$report->run()->render();
?>
</body>
</html>
#+end_src

Esto incluye también varias librerías de frontend como bootstrap y font-awesome.  

Se puede notar que aquí se está usando un archivo llamado ~CoronaPorPais.php~.  Para Kool Report, es necesario crear una clase con cierto nombre y
una adicional para la visualización.  En este caso, queremos crear un reporte específico para coronavirus, por lo que se creará un archivo
y una clase con esos nombres.

** Clase de reporte de Kool Report

En esta clase no hay que hacer mucho más que crearla heredando de \ koolreport \ KoolReport, y hacer algunas configuraciones en algunos
de sus archivos.
#+begin_src php
<?php
require_once __DIR__ . '/vendor/autoload.php';

use \koolreport\processes\CalculatedColumn;
use \koolreport\processes\ColumnMeta;

class CoronaPorPais extends \koolreport\KoolReport
{
    public function settings()
    {
        $this->dia = date('Y-m-d H:i:s');
        return array(
            "dataSources" => array(
                "coronachan" => array(
                "connectionString" => "mysql:host=localhost;dbname=coronachan",
                "username" => "root",
                "password" => "root",
                "charset" => "utf8"
                )
            )
        );
    }

    public function setup()
    {
        $this->src('coronachan')
            ->query("
            select p.clave_pais, rd.confirmados, rd.muertes, rd.recuperados, p.iso2, p.nombre
            from paises as p join registro_dia rd on p.clave_pais = rd.clave_pais
            where date(rd.fecha) = (select max(date(fecha)) from registro_dia where date(fecha) < date('{$this->dia}'));
        ")
            ->pipe($this->dataStore("casos"));
    }
}
#+end_src

En el método ~settings~ se configuran las fuentes de datos, en este caso una conexión de MySQL.  En ~setup~ se configuran cada una de las fuentes
especificadas en settings.

** Creación de vista de HTML

El siguiente paso es añadir la visualización de la página web.
#+begin_src php
<?php
use \koolreport\widgets\koolphp\Table;
use \koolreport\widgets\google\GeoChart;
?>
<div class='report-content'>
    <div class="text-center">
        <h1>Reporte de COVID-19</h1>
        <p class="lead">Casos confirmados, muertes, y recuperados país</p>
    </div>

    <div class="row">
        <div class="col-lg-4">
    <?php
    GeoChart::create(array(
        "dataStore"=>$this->dataStore("casos"),
        "columns"=>array(
            "iso2"=>array(
                "label"=>"País"
            ),
            "confirmados"=>array(
                "label"=>"Casos Confirmados",
                "type"=>"number",
                "prefix"=>""
            ),
        ),
        "width"=>"100%",
        "options"=>array(
            "showTooltip"=> true,
            "showInfoWindow"=> true,
            "colorAxis" => ["colors"=> ['white', 'yellow']]
        )
    ));
    ?>
            <p class="lead">Confirmados</p>
        </div>

        <div class="col-lg-4">
            <?php
            GeoChart::create(array(
                "dataStore"=>$this->dataStore("casos"),
                "columns"=>array(
                    "iso2"=>array(
                        "label"=>"País"
                    ),
                    "muertes"=>array(
                        "label"=>"Muertes",
                        "type"=>"number",
                        "prefix"=>""
                    ),
                ),
                "width"=>"100%",
                "options"=>array(
                    "showTooltip"=> true,
                    "showInfoWindow"=> true,
                    "colorAxis" => ["colors"=> ['white', 'red']]
                )
            ));
            ?>
            <p class="lead">Muertes</p>
        </div>

        <div class="col-lg-4">
            <?php
            GeoChart::create(array(
                "dataStore"=>$this->dataStore("casos"),
                "columns"=>array(
                    "iso2"=>array(
                        "label"=>"País"
                    ),
                    "recuperados"=>array(
                        "label"=>"Recuperados",
                        "type"=>"number",
                        "prefix"=>""
                    ),
                ),
                "width"=>"100%",
                "options"=>array(
                    "showTooltip"=> true,
                    "showInfoWindow"=> true,
                    "colorAxis" => ["colors"=> ['white', 'green']]
                )
            ));
            ?>
            <p class="lead">Recuperados</p>
        </div>
    </div>

    <?php
    Table::create(array(
        "dataStore"=>$this->dataStore("casos")->sort(array("confirmados"=>"desc")),
        "columns"=>array(
            "nombre"=>array(
                "label"=>"País"
            ),
            "confirmados"=>array(
                "label"=>"Casos confirmados",
                "type"=>"number",
                "prefix"=>"",
            ),
            "muertes"=>array(
                "label"=>"Muertes",
                "type"=>"number",
                "prefix"=>"",
            ),
            "recuperados"=>array(
                "label"=>"Recuperados",
                "type"=>"number",
                "prefix"=>"",
            )
        ),
        "paging"=>array(
            "pageSize"=>10,
        ),
        "cssClass"=>array(
            "table"=>"table table-bordered table-striped"
        )
    ));
    ?>
</div>
#+end_src

En general esto se hace como una página web común y corriente, excepto por las partes donde se pueden crear tablas, mapas, y otras cosas.  Los
mapas pueden ser creados con ~GeoChart::Create~ y las tablas con ~Table::create~.  En ambos casos, es necesario configurar el origen de los datos
con la llave ~dataStore~.  Esta fuente de datos debe coincidir con las especificadas en el ~setup~ de la clase (en nuestro caso, se configuró al final con un pipe).

Con todo esto, ya debería ser posible ver la página web.

#+DOWNLOADED: file://home/sggutier/Bildoj/Screenshot_2020-05-10%20Reporte%20de%20Coronavirus.png @ 2020-05-10 19:36:45
#+attr_org: :width 500
#+attr_html: :width 100%
#+CAPTION: Captura de pantalla del sitio web
[[file:Creando_visualizacion_en_HTML/visualizacion.png]]


* Creando reportes en PDF

La siguiente parte depende de o pagarle 50 dólares a Kool Reports o intentar hacer algo hecho con resistol nosotros mismos y sentirnos estafados porque
Kool Reports cobra por generar pdfs.  A continuación, debemos enojarnos porque encima de todo la gente de Kool Reports usa PhantomJs para usar un chrome
del lado del servidor para renderizar páginas web y convertirlas a pdf.  Nosotros vamos a hacer algo similar pero gratis.

Primero es necesario crear una página únicamente para renderizar Pdfs.
#+begin_src php
<?php
use \koolreport\widgets\koolphp\Table;
use \koolreport\widgets\google\GeoChart;
?>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="Pagina con reportes del coronavirus :v">
    <meta name="author" content="German Gutierrez">
    <meta name="keywords" content="php reportes framework">
    <title>Reporte de Coronavirus</title>

    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
</head>
<body>
<html>
    <div class="text-center">
        <h1>Reporte de COVID-19</h1>
        <h4>Casos confirmados, muertes, y recuperados país</h4>
    </div>

    <hr/>

    <div class="row">
        <div class="col-12">
    <?php
    GeoChart::create(array(
        "dataStore"=>$this->dataStore("casos"),
        "columns"=>array(
            "iso2"=>array(
                "label"=>"País"
            ),
            "confirmados"=>array(
                "label"=>"Casos Confirmados",
                "type"=>"number",
                "prefix"=>""
            ),
        ),
        "width"=>"100%",
        "options"=>array(
            "showTooltip"=> true,
            "showInfoWindow"=> true,
            "colorAxis" => ["colors"=> ['white', 'yellow']]
        )
    ));
    ?>
            <p class="lead">Confirmados</p>
        </div>

        <div class="col-12">
            <?php
            GeoChart::create(array(
                "dataStore"=>$this->dataStore("casos"),
                "columns"=>array(
                    "iso2"=>array(
                        "label"=>"País"
                    ),
                    "muertes"=>array(
                        "label"=>"Muertes",
                        "type"=>"number",
                        "prefix"=>""
                    ),
                ),
                "width"=>"100%",
                "options"=>array(
                    "showTooltip"=> true,
                    "showInfoWindow"=> true,
                    "colorAxis" => ["colors"=> ['white', 'red']]
                )
            ));
            ?>
            <p class="lead">Muertes</p>
        </div>

        <div class="col-12">
            <?php
            GeoChart::create(array(
                "dataStore"=>$this->dataStore("casos"),
                "columns"=>array(
                    "iso2"=>array(
                        "label"=>"País"
                    ),
                    "recuperados"=>array(
                        "label"=>"Recuperados",
                        "type"=>"number",
                        "prefix"=>""
                    ),
                ),
                "width"=>"100%",
                "options"=>array(
                    "showTooltip"=> true,
                    "showInfoWindow"=> true,
                    "colorAxis" => ["colors"=> ['white', 'green']]
                )
            ));
            ?>
            <p class="lead">Recuperados</p>
        </div>
    </div>

    <?php
    Table::create(array(
        "dataStore"=>$this->dataStore("casos")->sort(array("confirmados"=>"desc")),
        "columns"=>array(
            "nombre"=>array(
                "label"=>"País"
            ),
            "confirmados"=>array(
                "label"=>"Casos confirmados",
                "type"=>"number",
                "prefix"=>"",
            ),
            "muertes"=>array(
                "label"=>"Muertes",
                "type"=>"number",
                "prefix"=>"",
            ),
            "recuperados"=>array(
                "label"=>"Recuperados",
                "type"=>"number",
                "prefix"=>"",
            )
        ),
        "cssClass"=>array(
            "table"=>"table table-bordered table-striped"
        )
    ));
    ?>
</body>
</html>
#+end_src

A continuación, se crea una página para descargar el pdf.  Se agrega un link a la página principal para esto.
#+begin_src php
<?php

if($_GET["peticion"]) {
    require_once "CoronaPorPais.php";
    $report = new CoronaPorPais();

    $report->run()->render('CoronaPorPaisPdf');
}
else {
    $nombrePdf = '';
    $vals = array_merge(range(0, 9), range('a', 'z'));
    for ($i = 0; $i < 50; $i++) {
        $nombrePdf .= $vals[array_rand($vals)];
    }
    $nombrePdf .= ".pdf";
    exec('./generaPdf.sh ' . $nombrePdf);
    $attachment_location = $_SERVER["DOCUMENT_ROOT"] . '/' . $nombrePdf;
    if (file_exists($attachment_location)) {
        header($_SERVER["SERVER_PROTOCOL"] . " 200 OK");
        header("Cache-Control: public"); // needed for internet explorer
        header("Content-Type: application/pdf");
        header("Content-Transfer-Encoding: Binary");
        header("Content-Length:".filesize($attachment_location));
        header("Content-Disposition: attachment; filename=reporte_covid.pdf");
        readfile($attachment_location);
        unlink($attachment_location);
        die();
    } else {
        die("Error: File not found.");
    }
}
#+end_src

En seguida, se instala slimerjs.  Esto sirve para crear scripts donde se le ordena hacer cosas a un motor web, en particular para gecko.

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_231308.png @ 2020-05-10 23:13:50
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Instalación de slimerjs
[[file:Creando_reportes_en_PDF/2020-05-10_23-13-50_Screenshot_20200510_231308.png]]

Una vez instalado, se crea un script llamado ~generaPdf.sh~.  El contenido debe ser similar al siguiente:
#+begin_src shell
#!/bin/bash
export SLIMERJSLAUNCHER=/home/sggutier/.local/opt/fireviejo/firefox
slimerjs --headless scriptNavegador.js $1
#+end_src

En la variable ~SLIMJSLAUNCHER~ es necesario especificar la ruta de un binario de firefox entre las versiones 56 y 59 específicamente.
#+begin_src javascript
var page = require('webpage').create();
var system = require('system');
var width=1280;
var height=1024;
page.viewportSize = {width: width, height: height};
page.paperSize={
    format: 'letter',
    orientation: 'portrait',
    margin: '2cm',
    headerStr:{left:'', center:'&T', right:''},
    footerStr:{left:'', center:'', right:'&P de &L'}
}
output = system.args[1];
page.open( 'http://localhost:8001/export.php?peticion=si', function( status ) {
    console.log( "Status: " + status );
    if ( status === "success" ) {
        // Se espera como 1 segundo a que la pagina cargue todas sus weas internas de javascript
        setTimeout( function() {
            page.render( output );
            phantom.exit();
        },1000);
    }
});
#+end_src

Este script es horriblemente específico porque necesitamos especificarle la ruta de la página web de donde se descargará el pdf.  Por ahí
también hay otras opciones, como ~&T~ para especificar partes de las cabecera.  Nótese que en este caso especificamos el puerto 8001.  Esto es necesario
mientras hagamos pruebas de manera local si estamos usando el servidor web que php tiene incluido en lugar de algún otro.  El servidor interno de php 
solo puede tener un proceso,  por lo que se necesitan 2 para que el servidor pueda mandar a llamarse a si mismo para renderizar la página en 
un navegador web sin cabeza del lado del servidor.

Finalmente, ejecutamos esta monstruosidad pegada con cinta adhesiva en dos servidores web internos:

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_232651.png @ 2020-05-10 23:27:19
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Esto está lleno de malas prácticas parte 1
[[file:Creando_reportes_en_PDF/2020-05-10_23-27-19_Screenshot_20200510_232651.png]]

#+DOWNLOADED: file:///home/sggutier/Bildoj/Screenshot_20200510_232635.png @ 2020-05-10 23:28:09
#+attr_org: :width 500
#+attr_html: :width 80%
#+CAPTION: Malas prácticas 2: Descarga de PDF
[[file:Creando_reportes_en_PDF/2020-05-10_23-28-09_Screenshot_20200510_232635.png]]



